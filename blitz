#!/usr/bin/env bash
# version configurations
BSP_SERVER_VERSION="1.0.2"

# set up vars
DATABASE_USER="root"
DATABASE_PASS=""

TOMCAT_ZIP="$BSP_SERVER_VERSION.zip"
TOMCAT_REMOTE="https://github.com/OttoHagg/brightspot-server/archive/v$TOMCAT_ZIP"
TOMCAT_SHA256="9185c301ee106a80d0d2e6d823fb9c21de9729e78ee5a0933f4f519ad0eb2138"

#script status
PROGNAME=$(basename $0)
GIT_REGEX='((https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|])|((git@github.com:[^[:space:]]*).*)'

validateName() {
    echo -n "Please name your project directory: "
    read PROJECT_NAME
}

# checks to see if wget is installed on a mac and installs if necessary
installWget() {
    if [ "$(uname)" == "Darwin" ]; then
        ! brew ls --versions wget > /dev/null && brew install wget
    fi
}

getTomcat() {
    # detect OS and cache appropriately
    if [ "$(uname)" == "Darwin" ]; then
        TOMCAT_CACHE=~/Library/Caches/blitz
    else
        TOMCAT_CACHE=~/.cache/blitz
    fi

    mkdir -p $TOMCAT_CACHE/
    if ! [[ $(shasum -a 256 $TOMCAT_CACHE/brightspot-server-$TOMCAT_ZIP | awk '{ print $1 }') == $TOMCAT_SHA256 ]]; then
        echo "Tomcat not found or is corrupt, downloading from remote source"
        installWget
        wget -O $TOMCAT_CACHE/brightspot-server-$TOMCAT_ZIP $TOMCAT_REMOTE
    fi
    cp $TOMCAT_CACHE/brightspot-server-$TOMCAT_ZIP ./tomcat.zip
}

#	----------------------------------------------------------------
#	Function for exit due to fatal program error
#   Also removes any autogenerated files up to the point of failure
#   USE WITH CAUTION
#   Accepts 1 argument:
#	string containing descriptive error message
#	----------------------------------------------------------------
function error_exit
{
	echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
    # rm -rf $PROJ_PATH
	exit 1
}



createProject() {
    echo -n "Git Clone URL (HTTPS/SSH): "
    read GIT_URL
    if ! [[ $GIT_URL =~ $GIT_REGEX ]] ; then
        error_exit "Git URL invalid!"
    fi
    mkdir -p ./$PROJECT_NAME
    PROJ_PATH=$(pwd)/$PROJECT_NAME
    cd $PROJECT_NAME
    # Clone in project repo and download, extract, and delete tomcat
    PROJECT_DIR=$(basename $GIT_URL)-project
    git clone $GIT_URL $PROJECT_DIR || error_exit "Git clone failed!"
    getTomcat
    unzip ./tomcat.zip
    rm -rf ./tomcat.zip
    # create mysql schema
    mysql -u root -e "CREATE DATABASE IF NOT EXISTS ${PROJECT_NAME//[\.-]/} CHARACTER SET utf8 COLLATE utf8_general_ci;" || error_exit "MySQL not configured on PATH!"
    # update context.xml
    CONTEXT_FILE="./brightspot-server-$BSP_SERVER_VERSION/conf/context.xml"
    sed -i.bak "s#DATABASE_NAME#${PROJECT_NAME//[\.-]/}#g" $CONTEXT_FILE
    sed -i.bak "s#DATABASE_USER#$DATABASE_USER#g" $CONTEXT_FILE
    sed -i.bak "s#DATABASE_PASS#$DATABASE_PASS#g" $CONTEXT_FILE
    sed -i.bak "s#TOMCAT_PATH#$(pwd)/brightspot-server-$BSP_SERVER_VERSION#g" $CONTEXT_FILE
    cd $PROJECT_DIR
    # Maven build
    rm -rf node_modules && yarn cache clean
    mvn clean install || error_exit "Maven build FAILURE"
    #link war to root
    cd ../brightspot-server-$BSP_SERVER_VERSION/webapps
    if [[ -d "../../$PROJECT_DIR/site" ]]; then
        ln -sf ../../$PROJECT_DIR/site/target/*.war ./ROOT.war
    else
        ln -sf ../../$PROJECT_DIR/target/*.war ./ROOT.war
    fi


    # make shell scripts executable
    cd ../bin
    chmod a+x *.sh
    cd ../
    chown -R $USER *
}

start_time=`date +%s`
echo "Brightspot Installation"
while true; do
    validateName
    if [[ ! -z $PROJECT_NAME ]]; then
        createProject
        break
    else
        echo "Please enter a valid directory name"
    fi
done

echo "BRIGHTSPOT Server Setup Complete"
echo "Execution time: $(expr `date +%s` - $start_time)s"
